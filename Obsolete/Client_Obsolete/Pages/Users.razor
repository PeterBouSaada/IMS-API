@page "/Users"
@inject HttpClient Http
@inject Blazored.LocalStorage.LocalStorageService localStorage
@inject IJSRuntime js
@inject NavigationManager NavManager
@using Models
@using Classes
@using System.Net
@using Newtonsoft.Json

<div class="user-container">
    <div class="navigation">
        <ul>
            <li @onclick='f => callJsFunctionAndRefresh("ShowPage", 0)'>Users</li>
            <li @onclick='f => callJsFunction("ShowPage", 1)'>Add user</li>
            <li class="bottom" @onclick='backToManagement'>Go back</li>
        </ul>
    </div>
    <div class="container" id="user-container">
        <div class="search-box">
            <input type="text" name="search" placeholder="Find users..." spellcheck="false" @bind-value="searchQuery" @onkeyup="SubmitUserSearch" />
        </div>
        <div class="users-list">
            @foreach (User user in users)
            {
                <UserCards @ref="userCards" user="user" onUserEdit="userEdit" onUserDelete="userDelete"></UserCards>
            }
        </div>
    </div>
    <div class="add-container" id="add-container">
        <AddForm @ref="addForm"></AddForm>
    </div>
    <div class="edit-container" id="edit-container">
        <Client.Pages.Children.EditForm @ref="editForm" getUsers="GetUsers"></Client.Pages.Children.EditForm>
    </div>
    <div class="delete-container" id="delete-container">
        <DeleteForm @ref="deleteForm"></DeleteForm>
    </div>
</div>

@code {

    private string searchQuery { get; set; }
    private UserCards userCards { get; set; }
    private AddForm addForm { get; set; }
    private Client.Pages.Children.EditForm editForm { get; set; }
    private DeleteForm deleteForm { get; set; }
    public List<User> users = new List<User>();

    public async Task userEdit(User user)
    {
        editForm.editUsername = user.username;
        await callJsFunction("ShowPage", 2);
        editForm.user = user;
    }

    public async Task userDelete(User user)
    {
        deleteForm.user = user;
    }

    protected async override Task OnInitializedAsync()
    {
        User user = new User();
        await GetAllUsers(user);
    }

    public void backToManagement()
    {
        NavManager.NavigateTo("/Management");
    }

    public async Task SubmitUserSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            await GetUsers();
        }
    }

    public async Task GetUsers()
    {
        User user = new User();
        user.username = searchQuery;
        await GetAllUsers(user);
    }

    public async Task GetAllUsers(User user)
    {
        HttpRequestService<User> requestService = new HttpRequestService<User>(Http, localStorage);
        if (user.username == "" || user.username == null)
        {
            HttpResponseMessage request = await Task.Run(() => (requestService.GetRequest(user, "https://localhost:5001/API/user/getAll")));
            if (request.StatusCode == HttpStatusCode.OK)
            {
                users = JsonConvert.DeserializeObject<List<User>>(await request.Content.ReadAsStringAsync());
                StateHasChanged();
            }
        }
        else
        {
            HttpResponseMessage request = await Task.Run(() => (requestService.PostRequest(user, "https://localhost:5001/API/user/search")));
            if (request.StatusCode == HttpStatusCode.OK)
            {
                users = JsonConvert.DeserializeObject<List<User>>(await request.Content.ReadAsStringAsync());
                StateHasChanged();
            }
        }
    }

    public async Task callJsFunctionAndRefresh(string function, object param)
    {
        await callJsFunction(function, param);
        await GetUsers();
    }

    public async Task callJsFunction(string funcName, object param)
    {
        await js.InvokeVoidAsync(funcName, param);
    }

}
