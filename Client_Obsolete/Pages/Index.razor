@page "/"
@using System.Net
@inject HttpClient Http
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.LocalStorageService localStorage
@inject Utility utility
@using Models
@using Interfaces
@using Classes


<div class="login-container">
    <div class="small-form">
        <h2>Login to IMS v1.0.0</h2>
        <div class="login-form">
            <span>@loginError</span>
            <input type="text" name="username" @onkeyup="@ButtonPressed" placeholder="username" spellcheck="false" @bind-value="username" />
            <span>@usernameError</span>
            <input type="password" name="password" @onkeyup="@ButtonPressed" placeholder="password" @bind-value="password" />
            <span> @passwordError</span>
            <button type="submit" @onclick="SubmitLogin">Login</button>
        </div>
    </div>
</div>

@code{
    protected override void OnInitialized()
    {
        string token = localStorage.GetItemAsString("BearerToken");
        if (token != null && !Utility.isTokenExpired(token))
        {
            NavManager.NavigateTo("Management");
        }
    }

    private string username { get; set; }
    private string password { get; set; }
    private string usernameError { get; set; }
    private string passwordError { get; set; }
    private string loginError { get; set; }

    private async Task ButtonPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SubmitLogin();
        }
    }

    private async Task SubmitLogin()
    {
        User user = new User();
        user.username = username;
        user.password = password;

        bool error = false;

        loginError = "";

        if (user.username == null || user.username == "")
        {
            usernameError = "Username is required.";
            error = true;
        }
        else
            usernameError = null;

        if (user.password == null || user.password == "")
        {
            passwordError = "Password is required.";
            error = true;
        }
        else
            passwordError = null;

        if (error)
            return;

        IHttpRequestService<User> requestService = new HttpRequestService<User>(Http, localStorage);

        HttpStatusCode request = await Task.Run(() => (requestService.tokenRequest(user)));

        if (request == HttpStatusCode.OK)
        {
            NavManager.NavigateTo("Management");
        }
        else if(request == HttpStatusCode.Unauthorized)
        {
            loginError = "Unable to authorize user " + username;
        }
        else
        {
            loginError = "Unknown error has occured.";
        }

    }

}