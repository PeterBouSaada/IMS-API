@inject HttpClient Http
@inject Blazored.LocalStorage.LocalStorageService localStorage
@inject IJSRuntime js
@inject NavigationManager NavManager
@using Models
@using Classes
@using System.Net

<div class="edit-user-form">
    <h2>Edit user @editUsername</h2>
    <span>@result</span>
    <input type="text" name="username" @bind-value="editUsername" placeholder="username" />
    <input type="password" name="password" @bind-value="editPassword" placeholder="password" />
    <input type="password" name="rePassword" @bind-value="editRePassword" placeholder="confirm password" />
    <button @onclick="EditUser">Edit user</button>
</div>

@code {

    public string editUsername { get; set; }
    private string editPassword { get; set; }
    private string editRePassword { get; set; }
    public User user { get; set; }
    private string result { get; set; }
    [Parameter]
    public EventCallback getUsers { get; set; }

    public async Task EditUser()
    {
        result = "";
        user.username = editUsername;
        user.password = editPassword;

        if (user.username == null || user.username == "")
        {
            return;
        }
        if (user.password == null || user.password == "")
        {
            return;
        }
        if (user.password != editRePassword)
        {
            return;
        }

        HttpRequestService<User> requestService = new HttpRequestService<User>(Http, localStorage);
        HttpResponseMessage response = await requestService.PutRequest(user, "Https://localhost:5001/API/user");

        if(response.StatusCode == HttpStatusCode.OK)
        {
            result = "Successfully updated user.";
        }
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            result = "Unable to authorize request, try logging in again.";
        }
        else
        {
            result = "Unknown error when trying to update user.";
        }
        user.id = null;
        user.username = null;
        user.password = null;
        editRePassword = "";

        await callJsFunctionAndRefresh("ShowPage", 0);

    }

    public async Task callJsFunctionAndRefresh(string funcName, object param)
    {
        await callJsFunction(funcName, param);
        await getUsers.InvokeAsync();
    }

    public async Task callJsFunction(string funcName, object param)
    {
        await js.InvokeVoidAsync(funcName, param);
    }

}
